/*
 * LowCSS 
 * A low-level functional CSS toolkit.
 * 
 * @repo: https://github.com/jmjuanes/lowcss
 * @issues: https://github.com/jmjuanes/lowcss/issues
 * @author: Josemi Juanes <hello@josemi.xyz>
 * @license: MIT License
 *
 */

// Forward configuration variables and public api
@forward "config";
@forward "reset";
@forward "forms";
@forward "api";

// Include sass modules
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

// Include lowcss modules
@use "config";
@use "api";
@use "utilities";

// @description check if the provided module or utility name is enabled
@function is-enabled($name) {
    // If we have provided a list of included modules, we will check
    // if this module is in the list
    @if meta.type-of(config.$include) == "list" {
        @return list.index(config.$include, $name) != null;
    }
    // If we have provided a list of excluded modules, we will check
    // if this module is not in the list
    @else if meta.type-of(config.$exclude) == "list" {
        @return list.index(config.$exclude, $name) == null;
    }
    // Other case, module is enabled
    @else {
        @return true;
    }
}

// @description Generate the utility from the given configuration
@mixin generate-utility($utility-name, $utility-config) {
    // Get utility alias from configuration
    $class: map.get($utility-config, "alias");
    @if map.has-key(config.$aliases, $utility-name) {
        $class: map.get(config.$aliases, $utility-name);
    }
    // Get utility variants list
    $variants: map.get($utility-config, "variants");
    @if map.has-key(config.$variants, $utility-name) {
        $variants: map.get(config.$variants, $utility-name);
        @if meta.type-of($variants) != "list" {
            $variants: ("default");
        }
    }
    $properties: map.get($utility-config, "properties");
    $values: map.get($utility-config, "values");
    // $is-dark: functions.list-includes($variants, "dark");
    // Check if the variants list includes the "default" variant
    // @if not functions.list-includes($variants, "default") {
    //     $variants: list.append($variants, "default");
    // }
    // Generate utility rules for each variant
    @each $variant in $variants {
        @each $key,$value in $values {
            $selector: "#{$class}#{config.$separator}#{$key}";
            // Pseudo variant selector
            @if map.has-key(config.$pseudos, $variant) {
                $pseudo: map.get(config.$pseudos, $variant);
                // Check if dark mode is enabled for this utility
                // @if $is-dark and config.$use-darkmode {
                //     html.dark .dark\:#{$variant}\:#{$classname}-#{$key}:#{$pseudo-value} {
                //         @include generate-rule($properties, $value, false);
                //     }
                // }
                .#{$selector}#{config.$pseudo-separator}#{$variant}#{$pseudo} {
                    @include api.rule($properties, $value);
                }
            }
            // For responsive variants, we will register the style
            // for each breakpoint in the list of breakpoints
            @else if $variant == "responsive" and meta.type-of(config.$breakpoints) == "map" {
                @each $breakpoint in map.keys(config.$breakpoints) {
                    @include api.screen-above($breakpoint) {
                        .#{$selector}#{config.$breakpoint-separator}#{$breakpoint} {
                            @include api.rule($properties, $value);
                        }
                    }
                }
            }
            // Check for default variant
            @else if $variant == "default" {
                // @if $is-dark and config.$use-darkmode {
                //     html.dark .dark\:#{$classname}-#{$key} {
                //         @include generate-rule($properties, $value, false);
                //     }
                // }
                .#{$selector} {
                    @include api.rule($properties, $value);
                }
            }
        }
    }
}

// @description generate utilities
@mixin utilities() {
    @each $utility-name,$utility-config in utilities.$all-utilities {
        @if is-enabled(($utility-name)) {
            @include generate-utility($utility-name, $utility-config);
        }
    }
}
