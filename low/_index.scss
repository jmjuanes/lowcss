// Forward configuration variables and public api
@forward "config";
@forward "reset";
@forward "forms";
@forward "keyframes";
@forward "api";

// Include sass modules
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

// Include lowcss modules
@use "config";
@use "api";
@use "internal";
@use "utilities" as *;

// @description check if the provided module or utility name is enabled
@function is-enabled($name) {
    // If we have provided a list of included modules, we will check
    // if this module is in the list
    @if meta.type-of(config.$include) == "list" {
        @return list.index(config.$include, $name) != null;
    }
    // If we have provided a list of excluded modules, we will check
    // if this module is not in the list
    @else if meta.type-of(config.$exclude) == "list" {
        @return list.index(config.$exclude, $name) == null;
    }
    // Other case, module is enabled
    @else {
        @return true;
    }
}

// @description get utility values
@function utility-values($utility-name, $default-values) {
    @if meta.type-of($default-values) != "map" {
        $default-values: ();
    }
    @if map.has-key(config.$extend, $utility-name) {
        $new-values: map.get(config.$extend, $utility-name);
        @if meta.type-of($new-values) == "map" {
            @return map.merge($default-values, $new-values);
        }
    }
    @return $default-values;
}

// @description Generate the utility from the given configuration
@mixin utility($utility-name, $utility-config) {
    // Get utility alias from configuration
    $class: map.get($utility-config, "alias");
    @if map.has-key(config.$aliases, $utility-name) {
        $class: map.get(config.$aliases, $utility-name);
    }
    // Get utility variants list
    $variants: map.get($utility-config, "variants");
    @if map.has-key(config.$variants, $utility-name) {
        $variants: map.get(config.$variants, $utility-name);
        @if meta.type-of($variants) != "list" {
            $variants: ("default");
        }
    }
    $properties: map.get($utility-config, "properties");
    $values: utility-values($utility-name, map.get($utility-config, "values"));
    // $is-dark: functions.list-includes($variants, "dark");
    // Check if the variants list includes the "default" variant
    // @if not functions.list-includes($variants, "default") {
    //     $variants: list.append($variants, "default");
    // }
    // Generate utility rules for each variant
    @each $variant in $variants {
        @each $key,$value in $values {
            $selector: "#{config.$prefix}#{$class}#{config.$separator}#{$key}";
            // Pseudo variant selector
            @if map.has-key(config.$pseudos, $variant) {
                $pseudo: map.get(config.$pseudos, $variant);
                // Check if dark mode is enabled for this utility
                // @if $is-dark and config.$use-darkmode {
                //     html.dark .dark\:#{$variant}\:#{$classname}-#{$key}:#{$pseudo-value} {
                //         @include generate-rule($properties, $value, false);
                //     }
                // }
                .#{$selector}#{config.$pseudo-separator}#{$variant}#{$pseudo} {
                    @include api.rule($properties, $value);
                }
            }
            // For responsive variants, we will register the style
            // for each breakpoint in the list of breakpoints
            @else if $variant == "responsive" and meta.type-of(config.$breakpoints) == "map" {
                @each $breakpoint in map.keys(config.$breakpoints) {
                    @include api.screen-above($breakpoint) {
                        .#{$selector}#{config.$breakpoint-separator}#{$breakpoint} {
                            @include api.rule($properties, $value);
                        }
                    }
                }
            }
            // Check for default variant
            @else if $variant == "default" {
                // @if $is-dark and config.$use-darkmode {
                //     html.dark .dark\:#{$classname}-#{$key} {
                //         @include generate-rule($properties, $value, false);
                //     }
                // }
                .#{$selector} {
                    @include api.rule($properties, $value);
                }
            }
        }
    }
}

// @description generate utilities
@mixin utilities() {
    @each $utility-name,$utility-config in $all-utilities {
        @if is-enabled(($utility-name)) {
            @include utility($utility-name, $utility-config);
        }
    }
}

// @description utility mixin to apply utilities
@mixin apply($utilities) {
    $utilities-list: internal.str-split($utilities, " ");
    $parsed-separator: internal.str-replace(config.$separator, "\\", "");
    $parsed-pseudo-separator: internal.str-replace(config.$pseudo-separator, "\\", "");
    $parsed-breakpoint-separator: internal.str-replace(config.$breakpoint-separator, "\\", "");
    @each $utility in $utilities-list {
        @if string.index($utility, $parsed-separator) == null {
            @error "Invalid utility '#{$utility}'";
        }
        // First parse utility alias
        $utility-alias: string.slice($utility, 1, string.index($utility, $parsed-separator) - 1);
        @if config.$prefix != "" {
            $utility-alias: internal.str-replace($utility-alias, config.$prefix, "");
        }
        $utility-name: null;
        $utility-config: null;
        $utility-key: null;
        $utility-value: null;
        $utility-properties: null;
        $utility-pseudo: null;
        $utility-breakpoint: null;
        $rest-utility: string.slice($utility, string.index($utility, $parsed-separator) + string.length($parsed-separator));
        // Check for pseudo modifier
        @if string.index($rest-utility, $parsed-pseudo-separator) != null {
            $rest-utility-items: internal.str-split($rest-utility, $parsed-pseudo-separator);
            @if list.length($rest-utility-items) != 2 {
                @error "Invalid utility '#{$utility}'";
            }
            $utility-key: list.nth($rest-utility-items, 1);
            $utility-pseudo: list.nth($rest-utility-items, 2);
        }
        @else if string.index($rest-utility, $parsed-breakpoint-separator) != null {
            $rest-utility-items: internal.str-split($rest-utility, $parsed-breakpoint-separator);
            @if list.length($rest-utility-items) != 2 {
                @error "Invalid utility '#{$utility}'";
            }
            $utility-key: list.nth($rest-utility-items, 1);
            $utility-breakpoint: list.nth($rest-utility-items, 2);
        }
        @else {
            $utility-key: $rest-utility;
        }
        // Check for alias of the utility
        @each $alias in map.keys(config.$aliases) {
            @if $alias == $utility-alias {
                $utility-name: map.get(config.$aliases, $alias);
            }
        }
        // Get utility config
        @each $name,$config in $all-utilities {
            @if $utility-value == null {
                @if $name == $utility-name or map.get($config, "alias") == $utility-alias {
                    $values: utility-values($name, map.get($config, "values"));
                    @each $key,$value in $values {
                        @if "#{$key}" == "#{$utility-key}" {
                            // $utility-value: map.get($values, $utility-key);
                            $utility-value: $value;
                            $utility-properties: map.get($config, "properties");
                        }
                    }
                }
            }
        }
        // Check for not found
        @if $utility-value == null {
            // @error "Utility '#{$utility-alias}' not found.";
            @error "Utility value '#{$utility-key}' not found in utility configuration.";
        }
        // Apply pseudo selector
        @if $utility-pseudo != null {
            @if map.has-key(config.$pseudos, $utility-pseudo) == false {
                @error "Pseudo '#{$utility-pseudo}' not found in utility '#{$utility}'";
            }
            $pseudo: map.get(config.$pseudos, $utility-pseudo);
            &#{$pseudo} {
                @include api.rule($utility-properties, $utility-value);
            }
        }
        // Apply breakpoint selector
        @else if $utility-breakpoint != null {
            @if map.has-key(config.$breakpoints, $utility-breakpoint) == false {
                @error "Breakpoint '#{$utility-breakpoint}' not found in utility '#{$utility}'";
            }
            @include api.screen-above($utility-breakpoint) {
                @include api.rule($utility-properties, $utility-value);
            }
        }
        // Apply default utility
        @else {
            @include api.rule($utility-properties, $utility-value);
        }
    }
} 
