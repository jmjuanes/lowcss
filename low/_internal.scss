@use "sass:list";
@use "sass:meta";
@use "sass:string";

// @description split the provided string
@function str-split($string, $delimiter: null) {
    @if meta.type-of($delimiter) != "string" or not $delimiter {
        @return list.append((), $string);
    }
	$list: ();
    $index: string.index($string, $delimiter);
    @while $index != null {
        $list: list.append($list, string.slice($string, 1, $index - 1));
        $string: string.slice($string, $index + 1);
        $index: string.index($string, $delimiter)
    }
    // Append last element
    @if string.length($string) > 0 {
		$list: list.append($list, $string);
    }
	@return $list;
};

// @description replace in the provided string
// @param {String} $string - Source string
// @param {String} $search - Substring to replace
// @param {String} $replace - New value
// @return {String} - New string
@function str-replace($string, $search, $replace: "") {
    $index: string.index($string, $search);
    @if $index {
        $substring: string.slice($string, $index + string.length($search));
        $rest: str-replace($substring, $search, $replace);
        @return string.slice($string, 1, $index - 1) + $replace + $rest;
    }
    @return $string;
}

// @description Check if '$str' starts with the given '$search' sctring.
// @param {String} $str - Source string
// @param {String} $search - Substring to search for at the start of '$str'
// @return {Boolean} - 'true' if '$str' starts with '$search', 'false' in other case.
@function str-starts-with($str, $search) {
    @return string.index($str, $search) == 1;
}

// @description Generate an inline SVG image from the provided content
@function svg($content: "", $ns: "http://www.w3.org/2000/svg", $vb: "0 0 16 16") {
    @return "%3csvg xmlns='#{$ns}' viewBox='#{$vb}'%3e#{$content}%3c/svg%3e";
}

// @description generate an inline SVG from the provided path
@function svg-from-path($d: "", $stroke: "%23fff") {
    $attr: "fill='none' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'";
    $path: "%3cpath #{$attr} stroke='#{$stroke}' d='#{$d}'/%3e";
    @return svg($path);
}

// @description tiny utility to check if a module is enabled
@function is-enabled($name, $include-list, $exclude-list, $default: true) {
    // If we have provided a list of included utilities, we will check
    // if this utility is in the list
    @if $include-list {
        @return list.index($include-list, $name) != null;
    }
    // If we have provided a list of excluded modules, we will check
    // if this module is not in the list
    @else if $exclude-list {
        @return list.index($exclude-list, $name) == null;
    }
    // Return default
    @return $default;
}
