@use "sass:map";
@use "./config.scss";
@use "./util.scss";
@use "./plugins.scss";

// 1. Include reset module
@use "./reset.scss";

// 2. Generate core plugins styles
@each $name,$options in plugins.$core-plugins {
    // TODO: we need to check if this core plugin is enabled
    $name: util.get-in($options, "name", "");
    $properties: util.get-in($options, "properties", null);
    $values: util.get-in($options, "values", ());
    // $is-important: utils.get-in($options, "important", false);
    $is-responsive: util.get-in($options, "responsive", false);
    $states: util.get-in($options, "states", null);
    @if not util.is-list($states) {
        $states: ("default");
    }
    // Register helpers classes for each state
    @each $state in $states {
        @each $key,$value in $values {
            @include util.use-classname(config.$prefix, $name, $key, $state, null) {
                // @include hooks.use-rule($properties, $value, $is-important);
                @include util.use-rule($properties, $value, false);
            }
        }
    }
    // For responsive variants, we will register the style
    // for each breakpoint in the list of breakpoints
    @if $is-responsive {
        @include util.use-media(config.$screens) using ($screen-name) {
            @each $key,$value in $values {
                @include util.use-classname(config.$prefix, $name, $key, null, $screen-name) {
                    // @include hooks.use-rule($properties, $value, $is-important);
                    @include util.use-rule($properties, $value, false);
                }
            }
        }
    }
}

// 3. Generate custom plugins styles
// TODO: this feature will be enabled in the future
