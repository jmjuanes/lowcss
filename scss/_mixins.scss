@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "config";
@use "functions";

// @description Generate a rule
@mixin generate-rule($props, $value, $is-important: false) {
    $properties: functions.to-list($props);

    @each $prop in $properties {
        @if $is-important == true {
            #{string.unquote($prop)}: #{$value} !important;
        }
        @else {
            #{string.unquote($prop)}: #{$value};
        }
    }
}

// @description generate an @media rule of the specified screen size
// @param $screen-name: name of the screen, included in config.$screens
@mixin generate-screen($screen-name) {
    $screen-value: map.get(config.$screens, $screen-name);

    @media screen and (min-width: #{$screen-value}) {
        @content;
    }
}

// @description utility mixin
@mixin utility($class, $variants: (), $properties: (), $values: ()) {
    $is-dark: functions.list-includes($variants, "dark");
    // Check if the variants list includes the "default" variant
    // @if not functions.list-includes($variants, "default") {
    //     $variants: list.append($variants, "default");
    // }
    // Initialize classname pattern for this utility
    $classname: "#{config.$prefix}#{$class}";
    // Generate utility rules for each variant
    @each $variant in $variants {
        @each $key,$value in $values {
            // Pseudo variant selector
            @if map.has-key(config.$pseudos, $variant) {
                $pseudo-value: map.get(config.$pseudos, $variant);
                // Check if dark mode is enabled for this utility
                @if $is-dark and config.$use-darkmode {
                    html.dark .dark\\:#{$variant}\\:#{$classname}-#{$key}:#{$pseudo-value} {
                        @include generate-rule($properties, $value, false);
                    }
                }
                // No dark mode selector
                .#{$variant}\\:#{$classname}-#{$key}:#{$pseudo-value} {
                    @include generate-rule($properties, $value, false);
                }
            }
            // For responsive variants, we will register the style
            // for each breakpoint in the list of breakpoints
            @else if $variant == "responsive" and config.$screens != null {
                @each $screen-name in map.keys(config.$screens) {
                    @include generate-screen($screen-name) {
                        @each $key,$value in $values {
                            .#{$screen-name}\\:#{$classname}-#{$key} {
                                @include generate-rule($properties, $value, false);
                            }
                        }
                    }
                }
            }
            // Check for default variant
            @else if $variant == "default" {
                @if $is-dark and config.$use-darkmode {
                    html.dark .dark\\:#{$classname}-#{$key} {
                        @include generate-rule($properties, $value, false);
                    }
                }
                .#{$classname}-#{$key} {
                    @include generate-rule($properties, $value, false);
                }
            }
        }
    }
}
