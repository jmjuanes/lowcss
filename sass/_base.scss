@use "api";
@use "colors";
@use "config";
@use "internal";

// Reset CSS styles
@mixin reset() {
    // Reset box sizing and borders of all elements
    *,
    *:before,
    *:after {
        border-color: currentColor;
        border-style: solid;
        border-width: 0;
        box-sizing: border-box;
    }
    // Set default html style
    html {
        font-size: 16px;
        line-height: 1.5;
        scroll-behavior: smooth;
    }
     // Set default body style
    body {
        line-height: inherit;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
    }
    // Reset margins in some elements
    blockquote,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    hr,
    p,
    pre {
        margin: 0;
    }
    // Normalize typography in headings
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-size: inherit;
        font-weight: inherit;
    }
    // Reset margins on lists
    ul,
    ol,
    dl {
        margin: 0;
        padding: 0;
    }
    // Fix bold weight (in firefox)
    strong,
    b {
        font-weight: bold;
    }
    // Reset links
    a {
        color: inherit;
        text-decoration: inherit;
    }
    // Make images and videos responsive by default
    img,
    video {
        display: block;
        height: auto;
        max-width: 100%;
    }
    // Reset table border
    table {
        border-collapse: collapse;
        border-spacing: 0;
    }
    // td,
    // th {
    //     padding: 0;
    // }
    // Reset form elements
    button,
    input,
    select,
    textarea {
        color: inherit;
        font-family: inherit;
        font-weight: inherit;
        line-height: inherit;
        margin: 0;
        padding: 0;
    }
    // Prevent resizing textareas horizontally
    textarea {
        resize: vertical;
    }
}

// Forms reset styles
@mixin forms() {
    $checked-image: internal.svg-from-path("M4,8l3,3l5,-6");
    $indeterminate-image: internal.svg-from-path("M4,8h8");
    $select-image: internal.svg-from-path("M6,8l4,4l4,-4", $stroke: "%236c757d");
    $radio-image: internal.svg("%3ccircle cx='8' cy='8' r='3' fill='%23fff'/%3e");
    // Reset styles in common form elements
    [type="text"],
    [type="email"],
    [type="url"],
    [type="password"],
    [type="number"],
    [type="date"],
    [type="datetime"],
    [type="datetime-local"],
    [type="month"],
    [type="tel"],
    [type="time"],
    [type="week"],
    select,
    textarea {
        appearance: none;
        font-size: 1rem;
        line-height: 1.5;
        padding: 0.5rem 0.75rem;
    }
    // Reset placeholder style in input and textare elements
    input::placeholder,
    textarea::placeholder {
        color: currentColor;
        opacity: 0.5;
    }
    // Reset checkbox and radio inputs
    [type="checkbox"],
    [type="radio"] {
        appearance: none;
        background-origin: border-box;
        display: inline-block;
        height: 1rem;
        margin: 0;
        padding: 0;
        user-select: none;
        vertical-align: middle;
        width: 1rem;
    }
    [type="radio"] {
        border-radius: 999px;
    }
    // Reset checked and indeterminate states in checkbox and radio inputs
    [type="checkbox"]:checked,
    [type="checkbox"]:indeterminate,
    [type="radio"]:checked {
        background-color: currentColor;
        background-position: center;
        background-repeat: no-repeat;
        background-size: 100% 100%;
        border-color: transparent;
    }
    [type="checkbox"]:checked {
        background-image: url("data:image/svg+xml,#{$checked-image}");
    }
    [type="checkbox"]:indeterminate {
        background-image: url("data:image/svg+xml,#{$indeterminate-image}");
    }
    [type="radio"]:checked {
        background-image: url("data:image/svg+xml,#{$radio-image}");
    }
    // Reset range input element
    [type="range"] {
        appearance: none;
        border-radius: 1rem;
        display: block;
        margin: 0;
        min-width: 0;
        outline: none;
        &:-webkit-slider-thumb,
        &:-moz-range-thumb {
            background-color: currentColor;
            border: none;
            border-radius: 999px;
            height: 1rem;
            width: 1rem;
        }
        &:-webkit-slider-thumb {
            appearance: none;
        }
    }
    // Display a custom caret icon in select element
    select {
        background-image: url("data:image/svg+xml,#{$select-image}");
        background-position: right 0.75rem center;
        background-repeat: no-repeat;
        background-size: 16px 12px;
        padding-right: 2.5rem;
    }
}

// Keyframes styles
@mixin keyframes() {
    @keyframes bounce {
        0%,
        100% {
            transform: translateY(-25%);
            animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
        }
        50% {
            transform: translateY(0);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        }
    }
    @keyframes fadein {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    @keyframes fadeout {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }
    @keyframes ping {
        75%,
        100% {
            transform: scale(2);
            opacity: 0;
        }
    }
    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }
    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
}

// Scrollbar styles
// Note that those styles do not force to display scrollbars
@mixin scrollbar {
    .scrollbar {
        &::-webkit-scrollbar {
            height: 0.4rem;
            width: 0.4rem;
        }
        &::-webkit-scrollbar-track, 
        &::-webkit-scrollbar-corner {
            background-color: transparent;
        }
        &::-webkit-scrollbar-thumb {
            background-color: currentColor;
            border-radius: 1rem;
            cursor: pointer;
        }
        // &::-webkit-scrollbar-thumb:hover {
        //     opacity: 1;
        // }
        &::-webkit-scrollbar-button {
            display: none;
        }
    }
}

// Helpers styles
@mixin helpers {
    // Clear float elements
    .clearfix::after {
        clear: both;
        content: "";
        display: block;
    }
    // Fix elements to top or bottom
    .fixed-top,
    .fixed-bottom {
        left: 0;
        position: fixed;
        right: 0;
        z-index: config.$zindex-fixed;
    }
    .fixed-top {
        top: 0;
    }
    .fixed-bottom {
        bottom: 0;
    }
    // Sticky elements
    .sticky-top,
    .sticky-bottom {
        position: sticky;
        z-index: config.$zindex-sticky;
    }
    .sticky-top {
        top: 0;
    }
    .sticky-bottom {
        bottom: 0;
    }
    @each $breakpoint in internal.keys(config.$breakpoints) {
        @include api.screen-above($breakpoint) {
            .#{$breakpoint}#{config.$separator}sticky-top, 
            .#{$breakpoint}#{config.$separator}sticky-bottom {
                position: sticky;
                z-index: config.$zindex-sticky;
            }
            .#{$breakpoint}#{config.$separator}sticky-top {
                top: 0;
            }
            .#{$breakpoint}#{config.$separator}sticky-bottom {
                bottom: 0;
            }
        }
    }
    // Truncate text
    .truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
}

// @description markup module
@mixin markup($p: "markup") {
    :root {
        --low-#{$p}-body: #{colors.get-color("neutral-800")};
        --low-#{$p}-lead: #{colors.get-color("neutral-700")};
        --low-#{$p}-link: #{colors.get-color("neutral-900")};
        --low-#{$p}-bold: #{colors.get-color("neutral-900")};
        --low-#{$p}-code: #{colors.get-color("neutral-900")};
        --low-#{$p}-quote-body: #{colors.get-color("neutral-900")};
        --low-#{$p}-quote-border: #{colors.get-color("neutral-200")};
        --low-#{$p}-heading: #{colors.get-color("neutral-900")};
        --low-#{$p}-rule: #{colors.get-color("neutral-200")};
        --low-#{$p}-bullet: #{colors.get-color("neutral-300")};
        --low-#{$p}-counter: #{colors.get-color("neutral-500")};
        --low-#{$p}-code-body: #{colors.get-color("neutral-100")};
        --low-#{$p}-code-bg: #{colors.get-color("neutral-900")};
        --low-#{$p}-table-border: #{colors.get-color("neutral-200")};
        --low-#{$p}-table-bg-default: #fff;
        --low-#{$p}-table-bg: #{colors.get-color("neutral-100")};
    }
    .#{$p} {
        color: var(--low-#{$p}-body);
        line-height: 1.75;
        // Default paragraphs
        & :where(p) {
            margin-top: 1.5em;
            margin-bottom: 1.5em;
        }
        // Lead paragraphs
        & :where(p[class~="lead"]) {
            color: var(--low-#{$p}-lead);
        }
        // Bold text
        & :where(b, strong) {
            color: var(--low-#{$p}-bold);
            font-weight: 600;
        }
        // inline code
        & :where(code) {
            color: var(--low-#{$p}-code);
            font-size: 0.875em;
            font-weight: 600;
        }
        // Block code
        & :where(pre) {
            background-color: var(--low-#{$p}-code-bg);
            border-radius: 0.375rem;
            color: var(--low-#{$p}-code-body);
            font-size: 0.85em;
            font-weight: 400;
            line-height: 1.75;
            margin-top: 1.75em;
            margin-bottom: 1.75em;
            overflow-x: auto;
            padding: 1.25em;
            & code {
                background-color: transparent;
                color: inherit;
                border-width: 0;
                border-radius: 0;
                font-size: inherit;
                font-family: inherit;
                font-weight: inherit;
                line-height: inherit;
                padding: 0;
            }
        }
        // Blockquote
        & :where(blockquote) {
            border-left-color: var(--low-#{$p}-quote-border);
            border-left-width: 0.25rem;
            color: var(--low-#{$p}-quote-body);
            font-style: italic;
            font-weight: 500;
            margin-bottom: 1.5em;
            margin-top: 1.5em;
            padding-left: 1em;
        }
        // Headings
        & :where(h1, h2, h3, h4) {
            color: var(--low-#{$p}-heading);
            // font-weight: 800;
            // & strong {
            //     color: inherit;
            //     font-weight: 700;
            // }
        }
        & :where(h1) {
            font-size: 2.25em;
            font-weight: 800;
            line-height: 1.25;
            margin-bottom: 1em;
            margin-top: 2.5em;
        }
        & :where(h2) {
            font-size: 1.5em;
            font-weight: 700;
            line-height: 1.25;
            margin-bottom: 1em;
            margin-top: 2em;
        }
        & :where(h3) {
            font-size: 1.25em;
            font-weight: 600;
            line-height: 1.5;
            margin-bottom: 0.75em;
            margin-top: 1.5em;
        }
        & :where(h4) {
            // font-size: 1em;
            font-weight: 600;
            line-height: 1.5;
            margin-bottom: 0.5em;
            margin-top: 1.5em;
        }
        // Horizontal rule
        & :where(hr) {
            border-color: var(--low-#{$p}-rule);
            border-top-width: 1px;
            height: 0px;
            margin-top: 3em;
            margin-bottom: 3em;
        }
        // Links
        & :where(a) {
            color: var(--low-#{$p}-link);
            font-weight: 500;
            text-decoration: underline;
        }
        // List
        & :where(ul, ol) {
            margin-bottom: 1.25em;
            margin-top: 1.25em;
            padding-left: 1.625em;
            & > li {
                padding-left: 0.25em;
            }
        }
        & :where(ul) {
            list-style-type: disc;
            & > li::marker {
                color: var(--low-#{$p}-bullet);
            }
        }
        & :where(ol) {
            list-style-type: decimal;
            & > li::marker {
                color: var(--low-#{$p}-counter);
            }
        }
        & :where(li) {
            margin-bottom: 0.5em;
            margin-top: 0.5em;
        }
        // Table
        & :where(table) {
            // font-size: 0.875em;
            // line-height: 1.75;
            margin-bottom: 1.5em;
            margin-top: 1.5em;
            table-layout: auto;
            text-align: left;
            width: 100%;
        }
        & :where(thead th) {
            color: var(--low-#{$p}-heading);
            font-weight: 600;
            vertical-align: bottom;
        }
        & :where(thead th, tbody td) {
            border: 1px solid var(--low-#{$p}-table-border);
            padding: 0.6em 0.75em;
        }
        & :where(thead tr, tbody tr:nth-child(2n + 1)) {
            background-color: var(--low-#{$p}-table-bg-default);
        }
        & :where(tbody tr:nth-child(2n)) {
            background-color: var(--low-#{$p}-table-bg);
        }
        & :where(tbody tr) {
            vertical-align: baseline;
        }
        // First or last childs
        & > *:first-child {
            margin-top: 0;
        }
        & > *:last-child {
            margin-bottom: 0;
        }
    }
}

// Additional fonts
@mixin fonts {
    .font-inter {
        font-family: Inter, sans-serif;
    }
    .font-lato {
        font-family: Lato, sans-serif;
    }
    .font-poppins {
        font-family: Poppins, sans-serif;
    }
    .font-crimson {
        font-family: Crimson Pro, serif;
    }
    .font-nunito {
        font-family: Nunito, sans-serif;
    }
    .font-plex-sans {
        font-family: 'IBM Plex Sans', sans-serif;
    }
    .font-plex-serif {
        font-family: 'IBM Plex Serif', serif;
    }
    .font-plex-mono {
        font-family: 'IBM Plex Mono', monospace;
    }
}
