@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "functions";
@use "variables";

// @description generate media screen above the specified breakpoint
@mixin screen-above($breakpoint) {
    // TODO: display an error message if breakpoint is not found
    $breakpoint-size: map.get(variables.$breakpoints, $breakpoint);
    @media screen and (min-width: $breakpoint-size) {
        @content;
    }
}

// @description generate media screen below the specified breakpoint
@mixin screen-below($breakpoint) {
    // TODO: display an error message if breakpoint is not found
    $breakpoint-size: map.get(variables.$breakpoints, $breakpoint);
    @media screen and (max-width: $breakpoint-size) {
        @content;
    }
}

// @description generate media screen between the two breakpoints
@mixin screen-between($breakpoint-lower, $breakpoint-higher) {
    // TODO: display an error message if breakpoint is not found
    $lower: map.get(variables.$breakpoints, $breakpoint-lower);
    $higher: map.get(variables.$breakpoints, $breakpoint-higher);
    @media screen and (min-width: $lower) and (max-width: $higher) {
        @content;
    }
}

// @description Generate a rule
@mixin rule($properties, $value) {
    // $properties: $props;
    // We need to make sure that $properties is a list
    @if meta.type-of($properties) != "list" {
        $properties: list.append((), $properties);
    }
    @each $property in $properties {
        @if variables.$important {
            #{string.unquote($property)}: #{$value} !important;
        }
        @else {
            #{string.unquote($property)}: #{$value};
        }
    }
}

// @description Generate the utility from the given configuration
@mixin utility($utility-config) {
    $classname: map.get($utility-config, "classname");
    $properties: map.get($utility-config, "properties");
    $values: map.get($utility-config, "values");
    $variants: map.get($utility-config, "variants");
    // Check if the variants list includes the "default" variant
    // @if not functions.list-includes($variants, "default") {
    //     $variants: list.join(("default"), $variants);
    // }
    // Generate utilities for each variant
    @each $variant in $variants {
        @each $key,$value in $values {
            $selector: "#{variables.$prefix}#{$key}";
            // Check if classname has been provided for building the selector
            @if meta.type-of($classname) == "string" and $classname != "" {
                $selector: "#{variables.$prefix}#{$classname}-#{$key}";
                // Check for default key --> remove this from selector
                @if $key == "DEFAULT" {
                    $selector: "#{variables.$prefix}#{$classname}";
                }
            }
            $selector: functions.escape-selector($selector);
            // Default selector for this utility
            @if $variant == "default" {
                .#{$selector} {
                    @include rule($properties, $value);
                }
            }
            // For responsive modifiers, we will register the style
            // for each breakpoint in the list of breakpoints
            @else if $variant == "responsive" and meta.type-of(variables.$breakpoints) == "map" {
                @each $breakpoint in map.keys(variables.$breakpoints) {
                    @include screen-above($breakpoint) {
                        .#{$breakpoint}#{variables.$separator}#{$selector} {
                            @include rule($properties, $value);
                        }
                    }
                }
            }
            // Pseudo modifiers
            @else if map.has-key(variables.$pseudos, $variant) {
                $pseudo: $variant;
                $pseudo-selector: map.get(variables.$pseudos, $pseudo);
                // Group selector
                @if functions.str-starts-with($pseudo, "group-") {
                    .group#{$pseudo-selector} .#{$pseudo}#{variables.$separator}#{$selector} {
                        @include rule($properties, $value);
                    }
                }
                // Peer selector
                @else if functions.str-starts-with($pseudo, "peer-") {
                    .peer#{$pseudo-selector}~.#{$pseudo}#{variables.$separator}#{$selector} {
                        @include rule($properties, $value);
                    }
                }
                // Default pseudo selector
                @else {
                    .#{$pseudo}#{variables.$separator}#{$selector}#{$pseudo-selector} {
                        @include rule($properties, $value);
                    }
                }
            }
            // TODO: display no valid variant error
        }
    }
}

