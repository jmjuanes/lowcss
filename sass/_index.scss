@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "variables";
@use "base";
@use "mixins";
@use "functions";
@use "utilities";

// @description Inject base styles
@mixin base() {
    @include base.reset();
    @include base.forms();
    @include base.keyframes();
    @include base.scrollbar();
    @include base.helpers();
    @include base.fonts();
    @include base.markup();
}

// @description Generate root variables
@mixin root() {
    :root {
        // Fonts
        @each $font-name,$font-value in variables.$fonts {
            --low-font-#{$font-name}: #{$font-value};
        }
        // Colors variables
        @each $color-name,$color-value in variables.$colors {
            --low-#{$color-name}: #{$color-value};
        }
    }
}

// @description generate utilities
@mixin utilities() {
    @each $utility-name,$utility-config in utilities.$utilities {
        @include mixins.utility($utility-config);
    }
}

// @description utility mixin to apply utilities
@mixin apply($utilities) {
    $utilities-list: functions.str-split($utilities, " ");
    $parsed-separator: functions.str-replace(variables.$separator, "\\", "");
    $parsed-pseudo-separator: functions.str-replace(variables.$pseudo-separator, "\\", "");
    $parsed-breakpoint-separator: functions.str-replace(variables.$breakpoint-separator, "\\", "");
    @each $utility in $utilities-list {
        @if string.index($utility, $parsed-separator) == null {
            @error "Invalid utility '#{$utility}'";
        }
        // First parse utility alias
        $utility-alias: string.slice($utility, 1, string.index($utility, $parsed-separator) - 1);
        @if variables.$prefix != "" {
            $utility-alias: functions.str-replace($utility-alias, variables.$prefix, "");
        }
        $utility-name: null;
        $utility-config: null;
        $utility-key: null;
        $utility-value: null;
        $utility-properties: null;
        $utility-pseudo: null;
        $utility-breakpoint: null;
        $rest-utility: string.slice($utility, string.index($utility, $parsed-separator) + string.length($parsed-separator));
        // Check for pseudo modifier
        @if string.index($rest-utility, $parsed-pseudo-separator) != null {
            $rest-utility-items: functions.str-split($rest-utility, $parsed-pseudo-separator);
            @if list.length($rest-utility-items) != 2 {
                @error "Invalid utility '#{$utility}'";
            }
            $utility-key: list.nth($rest-utility-items, 1);
            $utility-pseudo: list.nth($rest-utility-items, 2);
        }
        @else if string.index($rest-utility, $parsed-breakpoint-separator) != null {
            $rest-utility-items: functions.str-split($rest-utility, $parsed-breakpoint-separator);
            @if list.length($rest-utility-items) != 2 {
                @error "Invalid utility '#{$utility}'";
            }
            $utility-key: list.nth($rest-utility-items, 1);
            $utility-breakpoint: list.nth($rest-utility-items, 2);
        }
        @else {
            $utility-key: $rest-utility;
        }
        // Check for alias of the utility
        @each $alias in map.keys(variables.$aliases) {
            @if $alias == $utility-alias {
                $utility-name: map.get(variables.$aliases, $alias);
            }
        }
        // Get utility config
        @each $name,$config in $all-utilities {
            @if $utility-value == null {
                @if $name == $utility-name or map.get($config, "alias") == $utility-alias {
                    $values: utility-values($name, map.get($config, "values"));
                    @each $key,$value in $values {
                        @if "#{$key}" == "#{$utility-key}" {
                            // $utility-value: map.get($values, $utility-key);
                            $utility-value: $value;
                            $utility-properties: map.get($config, "properties");
                        }
                    }
                }
            }
        }
        // Check for not found
        @if $utility-value == null {
            // @error "Utility '#{$utility-alias}' not found.";
            @error "Utility value '#{$utility-key}' not found in utility configuration.";
        }
        // Apply pseudo selector
        @if $utility-pseudo != null {
            @if map.has-key(variables.$pseudos, $utility-pseudo) == false {
                @error "Pseudo '#{$utility-pseudo}' not found in utility '#{$utility}'";
            }
            $pseudo: map.get(variables.$pseudos, $utility-pseudo);
            &#{$pseudo} {
                @include mixins.rule($utility-properties, $utility-value);
            }
        }
        // Apply breakpoint selector
        @else if $utility-breakpoint != null {
            @if map.has-key(variables.$breakpoints, $utility-breakpoint) == false {
                @error "Breakpoint '#{$utility-breakpoint}' not found in utility '#{$utility}'";
            }
            @include mixins.screen-above($utility-breakpoint) {
                @include mixins.rule($utility-properties, $utility-value);
            }
        }
        // Apply default utility
        @else {
            @include mixins.rule($utility-properties, $utility-value);
        }
    }
} 
